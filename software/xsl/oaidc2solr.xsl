<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:oai="http://www.openarchives.org/OAI/2.0/"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:eromm_oai="http://www.eromm.org/eromm_oai_harvester/"
    exclude-result-prefixes="oai xsi oai_dc dc eromm_oai"
    version="1.0">

	<xsl:import href="iso-639-1-to-639-2b.xsl"/>
    <xsl:output method="xml" indent="yes"/>

    <!--
        Parameters
    -->

    <!-- Misc  | default = "unset" -->
    <xsl:param name="timestamp" select="string('unset')"/>
    <xsl:param name="country_code" select="string('unset')"/>
    <xsl:param name="oai_repository_id" select="string('unset')"/>
    <xsl:param name="oai_set_id" select="string('unset')"/>

    <!-- Indexsettings | 0 = false (default), 1 = true -->
    <xsl:param name="i_cre" select="0"/>
    <xsl:param name="i_con" select="0"/>
    <xsl:param name="i_pub" select="0"/>
    <xsl:param name="i_dat" select="0"/>
    <xsl:param name="i_ide" select="0"/>
    <xsl:param name="i_rel" select="0"/>
    <xsl:param name="i_sub" select="0"/>
    <xsl:param name="i_des" select="0"/>
    <xsl:param name="i_sou" select="0"/>

    <!-- Viewsettings | 0 = false (default), 1 = true -->
    <xsl:param name="v_cre" select="0"/>
    <xsl:param name="v_con" select="0"/>
    <xsl:param name="v_pub" select="0"/>
    <xsl:param name="v_dat" select="0"/>
    <xsl:param name="v_ide" select="0"/>

    <!-- Leading comment -->
    <xsl:template match="/">
        <xsl:apply-templates />
    </xsl:template>

    <!-- Grab root -->
    <xsl:template match="oai:OAI-PMH">
        <update>
            <xsl:comment><xsl:value-of select="string(' ')" />Generated by EROMM-OAI-Harvester @ <xsl:value-of select="concat($timestamp, ' ')"/></xsl:comment>

            <!-- Do new records exist? -->
            <xsl:if test="oai:ListRecords/oai:record/oai:metadata">
                <add overwrite="true">
                   <xsl:apply-templates select="oai:ListRecords/oai:record" mode="add"/>
                </add>
            </xsl:if>
            <!-- Do deleted records exist? (sounds funny) -->
            <xsl:if test="oai:ListRecords/oai:record/oai:header[@status='deleted']">
                <delete>
                   <xsl:apply-templates select="oai:ListRecords/oai:record" mode="delete"/>
                </delete>
             </xsl:if>
        </update>
    </xsl:template>

    <!-- Grab records for indexing and create fields -->
    <xsl:template match="oai:ListRecords/oai:record" mode="add">
        <xsl:if test="not(oai:header[@status='deleted'])">
        <doc>
            <!-- Default fields -->
            <field name="indexed">NOW</field>
            <field name="type">oai</field>

            <!-- Parameter-fields -->
            <field name="country_code">
                <xsl:value-of select="$country_code"/>
            </field>
            <field name="oai_repository_id">
                <xsl:value-of select="$oai_repository_id"/>
            </field>
            <field name="oai_set_id">
                <xsl:value-of select="$oai_set_id"/>
            </field>

            <!-- Record-Header generated fields -->
            <field name="id">
                <xsl:value-of select="oai:header/oai:identifier"/>
            </field>
            <xsl:apply-templates select="oai:header/oai:setSpec"/>


            <!-- Although datestamp is a mandatory element, its not always there... -->
            <xsl:choose>
                <!-- If there is no datestamp, use the datestamp of the preceeding or following records -->
                <xsl:when test="oai:header/oai:datestamp and string-length(oai:header/oai:datestamp) &gt; 0">
                    <xsl:call-template name="parse_datestamp">
                        <xsl:with-param name="value" select="oai:header/oai:datestamp" />
                     </xsl:call-template>
                </xsl:when>
                <xsl:when test="preceding-sibling::oai:record/oai:header/oai:datestamp[node()]">
                    <xsl:call-template name="parse_datestamp">
                        <xsl:with-param name="value" select="preceding-sibling::oai:record/oai:header/oai:datestamp[node()][1]"/>
                    </xsl:call-template>
                </xsl:when>
                <xsl:when test="following-sibling::oai:record/oai:header/oai:datestamp[node()]">
                    <xsl:call-template name="parse_datestamp">
                        <xsl:with-param name="value" select="following-sibling::oai:record/oai:header/oai:datestamp[node()][1]"/>
                    </xsl:call-template>
                </xsl:when>
                <xsl:otherwise>
                    <!-- Even the preceding and following records don't contain a datestamp, use the responseDate (another mandatory element...) -->
                    <xsl:call-template name="parse_datestamp">
                        <xsl:with-param name="value" select="//oai:responseDate"/>
                    </xsl:call-template>
                </xsl:otherwise>
            </xsl:choose>

            <!-- DC-Metadata generated fields -->
            <xsl:apply-templates select="oai:metadata/oai_dc:dc"/>
        </doc>
        </xsl:if>
    </xsl:template>

    <!-- Grab records for deletion -->
    <xsl:template match="oai:ListRecords/oai:record" mode="delete">
        <xsl:if test="oai:header[@status='deleted']">
            <id>
                <xsl:value-of select="oai:header/oai:identifier"/>
            </id>
        </xsl:if>
    </xsl:template>

    <!-- Template for setSpec -->
    <xsl:template match="oai:header/oai:setSpec">
        <!-- Ignore eimpty setSpec elements (GDZ...) -->
        <xsl:if test="string-length(.) > 0">
            <field name="oai_setspec">
                <xsl:value-of select="."/>
            </field>
        </xsl:if>
    </xsl:template>


    <!-- Template for datestamp -->
    <xsl:template name="parse_datestamp">
        <xsl:param name="value" select="unset" />
        <field name="oai_datestamp">
            <!-- OAI allows datestamp with and without time (e.g. 2011-01-01 or 2011-01-01T00:00:00Z)
                 Solr requires with time, so it has to be appended if missing -->
            <xsl:choose>
               <!-- If the value is 10 chars, time is missing -->
                <xsl:when test="string-length($value) = 10">
                    <xsl:value-of select="concat($value, 'T00:59:59Z')"/>
              </xsl:when>
              <xsl:otherwise>
                  <xsl:value-of select="$value"/>
              </xsl:otherwise>
            </xsl:choose>
        </field>
    </xsl:template>


    <!-- Template for DC-Metadata -->
    <xsl:template match="oai:metadata/oai_dc:dc">
        <xsl:apply-templates select="*"/>

        <!-- dc:title - -->
        <field name="oai_title">
            <!-- If dc:title element(s) exist, use first one, otherwise use oai-identifier -->
            <xsl:choose>
                <xsl:when test="dc:title and (string-length(dc:title) &gt; 0)">
                    <!-- Check if the title is longer than 150 characters -->
                    <xsl:choose>
                        <!-- If so, cut at character 147 and add "..." -->
                        <xsl:when test="string-length(dc:title) &gt; 150">
                            <xsl:value-of select="concat(substring(dc:title, 1, 147), '...')"/>
                        </xsl:when>
                        <!-- If not use full title -->
                        <xsl:otherwise>
                            <xsl:value-of select="dc:title"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <!-- If there is no title, use oai-identifier -->
                <xsl:otherwise>
                    <xsl:value-of select="../../oai:header/oai:identifier"/>
                </xsl:otherwise>
            </xsl:choose>
        </field>


        <!-- ISBD-field -->
        <!-- This might be empty - solr doesn't mind though -->
        <!-- Punctuation might collide with the content (e. g. ",, ") - this is handled
             by PHP script with a simple string-replace after XSLT - too
             complicated to do it here -->
        <field name="oai_isbd">
            <!-- Checks also for string-lenght, although empty elements don't make sense, they exist... -->
            <xsl:if test="$v_cre = 1 and dc:creator and string-length(dc:creator) &gt; 0">
                <xsl:apply-templates select="dc:creator" mode="view"/>
            </xsl:if>
            <xsl:if test="$v_con = 1 and dc:contributor and string-length(dc:contributor) &gt; 0">
                <xsl:apply-templates select="dc:contributor" mode="view"/>
            </xsl:if>
            <xsl:if test="$v_pub = 1 and dc:publisher and string-length(dc:publisher) &gt; 0">
                <xsl:apply-templates select="dc:publisher" mode="view"/>
            </xsl:if>

            <!-- eromm_oai:date is used if applicable -->
            <xsl:if test="$v_dat = 1 and eromm_oai:date and string-length(eromm_oai:date) &gt; 2">
                <xsl:choose>
                    <xsl:when test="$v_pub = 1 and dc:publisher and string-length(dc:publisher) &gt; 0">, </xsl:when>
                    <xsl:when test="($v_cre = 1 and dc:creator and string-length(dc:creator) &gt; 0) or ($v_con = 1 and dc:contributor and string-length(dc:contributor) &gt; 0)">
                       <xsl:choose>
                           <xsl:when test="(count(dc:creator) + count(dc:contributor) &gt; 3)"> — </xsl:when>
                           <xsl:otherwise>. — </xsl:otherwise>
                       </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <!-- Remove period if last character - eromm_oai:date should not end with a period. -->
                <xsl:choose>
                    <xsl:when test="substring(eromm_oai:date, string-length(eromm_oai:date)) = '.'">
                        <xsl:value-of select="substring(eromm_oai:date, 1, string-length(eromm_oai:date)-1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="eromm_oai:date"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:if>

            <xsl:if test="$v_ide = 1 and dc:identifier and string-length(dc:identifier) &gt; 0">
                <xsl:apply-templates select="dc:identifier" mode="view"/>
            </xsl:if>
        </field>
    </xsl:template>


    <!-- Template for URLs -->
    <xsl:template match="eromm_oai:oai_url">
        <field name="oai_url">
            <xsl:value-of select="."/>
        </field>
    </xsl:template>


    <!-- Special for archive.org -->
    <xsl:template match="dc:format[contains(text(), 'PDF')]">
        <xsl:if test="position() = 1">
            <field name="oai_format">application/pdf</field>
        </xsl:if>
    </xsl:template>
    <xsl:template match="dc:format[contains(text(), 'Single Page Processed')]">
        <xsl:if test="position() = 1">
            <field name="oai_format">image/jpeg</field>
        </xsl:if>
    </xsl:template>



	<xsl:template match="dc:title">
		<field name="title">
			<xsl:value-of select="."/>
		</field>
	</xsl:template>

	<xsl:template match="dc:creator">
		<field name="author">
			<xsl:value-of select="."/>
		</field>
	</xsl:template>

	<xsl:template match="dc:contributor">
		<field name="contributor">
			<xsl:value-of select="."/>
		</field>
	</xsl:template>

	<xsl:template match="dc:publisher">
		<field name="publisher">
			<xsl:value-of select="."/>
		</field>
	</xsl:template>

	<xsl:template match="dc:subject">
		<field name="subject">
			<xsl:value-of select="."/>
		</field>
		<xsl:if test="substring(../../../oai:header/oai:identifier, 1, 14) = 'oai:arXiv.org:'">
			<xsl:call-template name="splitter">
				<xsl:with-param name="list" select="."/>
				<xsl:with-param name="separator">,</xsl:with-param>
				<xsl:with-param name="metadataType">subject_msc</xsl:with-param>
				<xsl:with-param name="minLength">5</xsl:with-param>
				<xsl:with-param name="maxLength">5</xsl:with-param>
			</xsl:call-template>
		</xsl:if>
	</xsl:template>

	<xsl:template match="dc:description">
		<field name="description">
			<xsl:value-of select="."/>
		</field>
	</xsl:template>

	<xsl:template match="dc:date">
<!--
		<field name="date">
			<xsl:value-of select="."/>
		</field>
-->
	</xsl:template>

	<xsl:template match="eromm_oai:date">
		<field name="date">
			<xsl:value-of select="."/>
		</field>
	</xsl:template>


	<xsl:template match="dc:type">
		<field name="type">
			<xsl:value-of select="."/>
		</field>
	</xsl:template>

	<xsl:template match="dc:language">
		<xsl:if test="string-length(.) &lt; 3">
			<field name="language">
				<xsl:call-template name="languageCodeConverter">
					<xsl:with-param name="languageCode" select="normalize-space(.)"/>
				</xsl:call-template>
			</field>
		</xsl:if>
	</xsl:template>

	<xsl:template match="dc:format">
		<field name="content_type">
			<xsl:value-of select="."/>
		</field>
	</xsl:template>

	<xsl:template match="dc:identifier | dc:relation">
		<xsl:choose>
			<xsl:when test="substring(., 1, 4) = 'doi:'">
				<field name="doi">
					<xsl:value-of select="substring(., 5)"/>
				</field>
			</xsl:when>
			<xsl:when test="substring(., 1, 18) = 'http://dx.doi.org/'">
				<field name="doi">
					<xsl:value-of select="substring(., 19)"/>
				</field>
			</xsl:when>
			<xsl:when test="substring(., 1, 7) = 'http://'
							or substring(., 1, 8) = 'https://'
							or substring(., 1, 6) = 'ftp://'">
				<field name="url">
					<xsl:value-of select="."/>
				</field>
			</xsl:when>
			<xsl:otherwise>
				<field>
					<xsl:attribute name="name">
						<xsl:value-of select="local-name(.)"/>
					</xsl:attribute>
					<xsl:value-of select="."/>
				</field>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<xsl:template match="dc:rights">
		<field name="rights">
			<xsl:value-of select="."/>
		</field>
	</xsl:template>

	<xsl:template match="dc:source">
<!--
		<field name="source">
			<xsl:value-of select="."/>
		</field>
-->
	</xsl:template>

	<xsl:template match="dc:coverage">
<!--
		<field name="coverage">
			<xsl:value-of select="."/>
		</field>
-->
	</xsl:template>


	<xsl:template match="*">
		<field name="ignoredField">
			<xsl:value-of select="name(.)"/>
		</field>
	</xsl:template>





	<xsl:template name="splitter">
		<xsl:param name="list"/>
		<xsl:param name="separator"/>
		<xsl:param name="metadataType"/>
		<xsl:param name="minLength"/>
		<xsl:param name="maxLength"/>

		<xsl:variable name="firstItem">
			<xsl:choose>
				<xsl:when test="contains($list, $separator)">
					<xsl:value-of select="normalize-space(substring-before($list, $separator))"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="normalize-space($list)"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>

		<xsl:variable name="remainingItems" select="substring-after($list, $separator)"/>


		<xsl:if test="$firstItem">
			<xsl:if test="(not($minLength) or string-length($firstItem) = $minLength)
							and (not($maxLength) or string-length($firstItem) = $maxLength)">
				<field>
					<xsl:attribute name="name">
						<xsl:value-of select="$metadataType"/>
					</xsl:attribute>
					<xsl:value-of select="$firstItem"/>
				</field>
			</xsl:if>
		</xsl:if>

		<xsl:if test="$remainingItems">
			<xsl:call-template name="splitter">
				<xsl:with-param name="list" select="$remainingItems"/>
				<xsl:with-param name="separator" select="$separator"/>
				<xsl:with-param name="metadataType" select="$metadataType"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template>




    <!--
        View-Templates ISBD
        Lots of conditions for proper punctuation and restrictions on the number of displayed elements and chars per element
        TODO: punctuation might be wrong if there are empty elements
        TODO: punctuation might be wrong if elements end on parts of punctuation
    -->

    <xsl:template match="dc:creator" mode="view">
        <xsl:if test="position() &lt; 4">
            <xsl:if test="position() = 1">/ </xsl:if>
            <!-- Check if the creator is longer than 80 characters -->
            <xsl:choose>
                <!-- If so, cut at character 77 and add "..." -->
                <xsl:when test="string-length(.) &gt; 80">
                    <xsl:value-of select="concat(substring(., 1, 77), '...')"/>
                </xsl:when>
                <!-- If not use full creator -->
                <xsl:otherwise>
                    <xsl:value-of select="."/>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; count(../dc:creator) and position() &lt; 3"> ; </xsl:if>
        </xsl:if>
        <xsl:if test="position() = 4"> ...</xsl:if>
    </xsl:template>
    <xsl:template match="dc:contributor" mode="view">
        <xsl:if test="position() + count(../dc:creator) &lt; 4">
            <xsl:if test="position() = 1 and not($v_cre = 1 and ../dc:creator and string-length(../dc:creator) &gt; 0)">/ </xsl:if>
            <xsl:if test="position() = 1 and $v_cre = 1 and ../dc:creator and string-length(../dc:creator) &gt; 0"> ; </xsl:if>
             <!-- Check if the contributor is longer than 80 characters -->
            <xsl:choose>
                <!-- If so, cut at character 77 and add "..." -->
                <xsl:when test="string-length(.) &gt; 80">
                    <xsl:value-of select="concat(substring(., 1, 77), '...')"/>
                </xsl:when>
                <!-- If not use full contributor -->
                <xsl:otherwise>
                    <xsl:value-of select="."/>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() + count(../dc:creator) &lt; 3 and (position() + count(../dc:creator)) &lt; (count(../dc:creator) + count(../dc:contributor))"> ; </xsl:if>
        </xsl:if>
        <xsl:if test="position() + count(../dc:creator) = 4"> ...</xsl:if>
    </xsl:template>
    <xsl:template match="dc:publisher" mode="view">
        <xsl:if test="position() &lt; 3">
            <xsl:if test="position() = 1 and (($v_cre = 1 and ../dc:creator and string-length(../dc:creator) &gt; 0) or ($v_con = 1 and ../dc:contributor and string-length(../dc:contributor) &gt; 0))">
                <xsl:choose>
                    <xsl:when test="(count(../dc:creator) + count(../dc:contributor) &gt; 3)"> — </xsl:when>
                    <xsl:otherwise>. — </xsl:otherwise>
                </xsl:choose>
            </xsl:if>
            <xsl:value-of select="."/>
            <xsl:if test="position() = 1 and count(../dc:publisher) &gt; 1"> ; </xsl:if>
        </xsl:if>
        <xsl:if test="position() = 3"> ...</xsl:if>
    </xsl:template>
    <xsl:template match="dc:identifier" mode="view">
        <xsl:if test="position() = 1 and (($v_cre = 1 and ../dc:creator and string-length(../dc:creator) &gt; 0) or ($v_con = 1 and ../dc:contributor and string-length(../dc:contributor) &gt; 0) or ($v_pub = 1 and ../dc:publisher and string-length(../dc:publisher) &gt; 0) or ($v_dat = 1 and ../eromm_oai:date and string-length(../eromm_oai:date) &gt; 0))">
              <xsl:choose>
                 <xsl:when test="((count(../dc:creator) + count(../dc:contributor) &gt; 3) and ((not(../eromm_oai:date) or string-length(../eromm_oai:date) = 0) and (not(../dc:publisher) or string-length(../dc:publisher) = 0))) or (count(../dc:publisher) &gt; 2 and (not(../eromm_oai:date) or string-length(../eromm_oai:date) = 0))"> — </xsl:when>
                 <xsl:otherwise>. — </xsl:otherwise>
              </xsl:choose>
        </xsl:if>
        <xsl:value-of select="."/>
        <xsl:if test="position() != last()">. — </xsl:if>
    </xsl:template>
</xsl:stylesheet>
